// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package example

import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/bozkurtemre/go-service-weaver-template/internal/example/Service",
		Iface: reflect.TypeOf((*Service)(nil)).Elem(),
		Impl:  reflect.TypeOf(impl{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return service_local_stub{impl: impl.(Service), tracer: tracer, allExamplesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/bozkurtemre/go-service-weaver-template/internal/example/Service", Method: "AllExamples", Remote: false, Generated: true}), createExampleMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/bozkurtemre/go-service-weaver-template/internal/example/Service", Method: "CreateExample", Remote: false, Generated: true}), getOneExampleByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/bozkurtemre/go-service-weaver-template/internal/example/Service", Method: "GetOneExampleById", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return service_client_stub{stub: stub, allExamplesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/bozkurtemre/go-service-weaver-template/internal/example/Service", Method: "AllExamples", Remote: true, Generated: true}), createExampleMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/bozkurtemre/go-service-weaver-template/internal/example/Service", Method: "CreateExample", Remote: true, Generated: true}), getOneExampleByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/bozkurtemre/go-service-weaver-template/internal/example/Service", Method: "GetOneExampleById", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return service_server_stub{impl: impl.(Service), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return service_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[Service] = (*impl)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*impl)(nil)

// Local stub implementations.

type service_local_stub struct {
	impl                     Service
	tracer                   trace.Tracer
	allExamplesMetrics       *codegen.MethodMetrics
	createExampleMetrics     *codegen.MethodMetrics
	getOneExampleByIdMetrics *codegen.MethodMetrics
}

// Check that service_local_stub implements the Service interface.
var _ Service = (*service_local_stub)(nil)

func (s service_local_stub) AllExamples(ctx context.Context) (r0 AllExamplesOut, err error) {
	// Update metrics.
	begin := s.allExamplesMetrics.Begin()
	defer func() { s.allExamplesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "example.Service.AllExamples", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.AllExamples(ctx)
}

func (s service_local_stub) CreateExample(ctx context.Context, a0 ExampleIn) (r0 bool, err error) {
	// Update metrics.
	begin := s.createExampleMetrics.Begin()
	defer func() { s.createExampleMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "example.Service.CreateExample", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.CreateExample(ctx, a0)
}

func (s service_local_stub) GetOneExampleById(ctx context.Context, a0 int64) (r0 ExampleOut, err error) {
	// Update metrics.
	begin := s.getOneExampleByIdMetrics.Begin()
	defer func() { s.getOneExampleByIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "example.Service.GetOneExampleById", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetOneExampleById(ctx, a0)
}

// Client stub implementations.

type service_client_stub struct {
	stub                     codegen.Stub
	allExamplesMetrics       *codegen.MethodMetrics
	createExampleMetrics     *codegen.MethodMetrics
	getOneExampleByIdMetrics *codegen.MethodMetrics
}

// Check that service_client_stub implements the Service interface.
var _ Service = (*service_client_stub)(nil)

func (s service_client_stub) AllExamples(ctx context.Context) (r0 AllExamplesOut, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.allExamplesMetrics.Begin()
	defer func() { s.allExamplesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "example.Service.AllExamples", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 0, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	*(*[]ExampleOut)(&r0) = serviceweaver_dec_slice_ExampleOut_875d0277(dec)
	err = dec.Error()
	return
}

func (s service_client_stub) CreateExample(ctx context.Context, a0 ExampleIn) (r0 bool, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.createExampleMetrics.Begin()
	defer func() { s.createExampleMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "example.Service.CreateExample", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += serviceweaver_size_ExampleIn_a50cc544(&a0)
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Bool()
	err = dec.Error()
	return
}

func (s service_client_stub) GetOneExampleById(ctx context.Context, a0 int64) (r0 ExampleOut, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getOneExampleByIdMetrics.Begin()
	defer func() { s.getOneExampleByIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "example.Service.GetOneExampleById", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int64(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.24.6 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type service_server_stub struct {
	impl    Service
	addLoad func(key uint64, load float64)
}

// Check that service_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*service_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s service_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "AllExamples":
		return s.allExamples
	case "CreateExample":
		return s.createExample
	case "GetOneExampleById":
		return s.getOneExampleById
	default:
		return nil
	}
}

func (s service_server_stub) allExamples(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.AllExamples(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_ExampleOut_875d0277(enc, ([]ExampleOut)(r0))
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) createExample(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 ExampleIn
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.CreateExample(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Bool(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) getOneExampleById(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int64
	a0 = dec.Int64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetOneExampleById(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type service_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that service_reflect_stub implements the Service interface.
var _ Service = (*service_reflect_stub)(nil)

func (s service_reflect_stub) AllExamples(ctx context.Context) (r0 AllExamplesOut, err error) {
	err = s.caller("AllExamples", ctx, []any{}, []any{&r0})
	return
}

func (s service_reflect_stub) CreateExample(ctx context.Context, a0 ExampleIn) (r0 bool, err error) {
	err = s.caller("CreateExample", ctx, []any{a0}, []any{&r0})
	return
}

func (s service_reflect_stub) GetOneExampleById(ctx context.Context, a0 int64) (r0 ExampleOut, err error) {
	err = s.caller("GetOneExampleById", ctx, []any{a0}, []any{&r0})
	return
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*ExampleIn)(nil)

type __is_ExampleIn[T ~struct {
	weaver.AutoMarshal
	Message string
}] struct{}

var _ __is_ExampleIn[ExampleIn]

func (x *ExampleIn) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("ExampleIn.WeaverMarshal: nil receiver"))
	}
	enc.String(x.Message)
}

func (x *ExampleIn) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("ExampleIn.WeaverUnmarshal: nil receiver"))
	}
	x.Message = dec.String()
}

var _ codegen.AutoMarshal = (*ExampleOut)(nil)

type __is_ExampleOut[T ~struct {
	weaver.AutoMarshal
	ID        int       "json:\"id,omitempty\""
	Message   string    "json:\"message,omitempty\""
	CreatedAt time.Time "json:\"created_at,omitempty\""
}] struct{}

var _ __is_ExampleOut[ExampleOut]

func (x *ExampleOut) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("ExampleOut.WeaverMarshal: nil receiver"))
	}
	enc.Int(x.ID)
	enc.String(x.Message)
	enc.EncodeBinaryMarshaler(&x.CreatedAt)
}

func (x *ExampleOut) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("ExampleOut.WeaverUnmarshal: nil receiver"))
	}
	x.ID = dec.Int()
	x.Message = dec.String()
	dec.DecodeBinaryUnmarshaler(&x.CreatedAt)
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_ExampleOut_875d0277(enc *codegen.Encoder, arg []ExampleOut) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_ExampleOut_875d0277(dec *codegen.Decoder) []ExampleOut {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]ExampleOut, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

// Size implementations.

// serviceweaver_size_ExampleIn_a50cc544 returns the size (in bytes) of the serialization
// of the provided type.
func serviceweaver_size_ExampleIn_a50cc544(x *ExampleIn) int {
	size := 0
	size += 0
	size += (4 + len(x.Message))
	return size
}
